"""Generated message classes for runtimeconfig version v1beta1.

Google Cloud RuntimeConfig Service.
"""
# NOTE: This file is autogenerated and should not be edited by hand.

from googlecloudsdk.third_party.apitools.base.protorpclite import messages as _messages
from googlecloudsdk.third_party.apitools.base.py import encoding


package = 'runtimeconfig'


class Cardinality(_messages.Message):
  """The Cardinality condition is met when the count of `Variable` resources
  under the specified path prefix reaches the specified number. For example,
  take the following variables in a RuntimeConfig object:   /foo/variable1 =
  "value1"   /foo/variable2 = "value2"   /bar/variable3 = "value3"  These
  variables would satisfy a Cardinality condition with `path` set to "/foo"
  and `number` set to 2, but would not satisify the same condition with
  `number` set to 3.

  Fields:
    number: The number of decendents of `path` that must exist before this
      condition is met. Optional; defaults to 1 if not specified.
    path: The root of the variable subtree to monitor. Required.
  """

  number = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  path = _messages.StringField(2)


class Empty(_messages.Message):
  """A generic empty message that you can re-use to avoid defining duplicated
  empty messages in your APIs. A typical example is to use it as the request
  or the response type of an API method. For instance:      service Foo {
  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);     }  The
  JSON representation for `Empty` is empty JSON object `{}`.
  """



class EndCondition(_messages.Message):
  """A condition that a Waiter resource is waiting for. The set of possible
  conditions may expand over time.

  Fields:
    cardinality: The Cardinality condition type configuration.
  """

  cardinality = _messages.MessageField('Cardinality', 1)


class ListConfigsResponse(_messages.Message):
  """Response for the `ListConfigs()` method. Order of returned configuration
  objects is arbitrary.

  Fields:
    configs: Found configurations in the project.
    nextPageToken: Pagination support.
  """

  configs = _messages.MessageField('RuntimeConfig', 1, repeated=True)
  nextPageToken = _messages.StringField(2)


class ListVariablesResponse(_messages.Message):
  """Response for the `ListVariables()` method. Order of returned variable
  objects is arbitrary.

  Fields:
    nextPageToken: Pagination support.
    variables: Matched variables and their values.
  """

  nextPageToken = _messages.StringField(1)
  variables = _messages.MessageField('Variable', 2, repeated=True)


class ListWaitersResponse(_messages.Message):
  """Response for the `ListWaiters()` method. Order of returned waiter objects
  is arbitrary.

  Fields:
    nextPageToken: Pagination support.
    waiters: Found waiters in the project.
  """

  nextPageToken = _messages.StringField(1)
  waiters = _messages.MessageField('Waiter', 2, repeated=True)


class Operation(_messages.Message):
  """This resource represents a long-running operation that is the result of a
  network API call.

  Messages:
    MetadataValue: Service-specific metadata associated with the operation.
      It typically contains progress information and common metadata such as
      create time. Some services might not provide such metadata.  Any method
      that returns a long-running operation should document the metadata type,
      if any.
    ResponseValue: The normal response of the operation in case of success.
      If the original method returns no data on success, such as `Delete`, the
      response is `google.protobuf.Empty`.  If the original method is standard
      `Get`/`Create`/`Update`, the response should be the resource.  For other
      methods, the response should have the type `XxxResponse`, where `Xxx` is
      the original method name.  For example, if the original method name is
      `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

  Fields:
    done: If the value is `false`, it means the operation is still in
      progress. If true, the operation is completed, and either `error` or
      `response` is available.
    error: The error result of the operation in case of failure.
    metadata: Service-specific metadata associated with the operation.  It
      typically contains progress information and common metadata such as
      create time. Some services might not provide such metadata.  Any method
      that returns a long-running operation should document the metadata type,
      if any.
    name: The server-assigned name, which is only unique within the same
      service that originally returns it. If you use the default HTTP mapping,
      the `name` should have the format of `operations/some/unique/name`.
    response: The normal response of the operation in case of success.  If the
      original method returns no data on success, such as `Delete`, the
      response is `google.protobuf.Empty`.  If the original method is standard
      `Get`/`Create`/`Update`, the response should be the resource.  For other
      methods, the response should have the type `XxxResponse`, where `Xxx` is
      the original method name.  For example, if the original method name is
      `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class MetadataValue(_messages.Message):
    """Service-specific metadata associated with the operation.  It typically
    contains progress information and common metadata such as create time.
    Some services might not provide such metadata.  Any method that returns a
    long-running operation should document the metadata type, if any.

    Messages:
      AdditionalProperty: An additional property for a MetadataValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @ype with
        type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a MetadataValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  @encoding.MapUnrecognizedFields('additionalProperties')
  class ResponseValue(_messages.Message):
    """The normal response of the operation in case of success.  If the
    original method returns no data on success, such as `Delete`, the response
    is `google.protobuf.Empty`.  If the original method is standard
    `Get`/`Create`/`Update`, the response should be the resource.  For other
    methods, the response should have the type `XxxResponse`, where `Xxx` is
    the original method name.  For example, if the original method name is
    `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

    Messages:
      AdditionalProperty: An additional property for a ResponseValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @ype with
        type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a ResponseValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  done = _messages.BooleanField(1)
  error = _messages.MessageField('Status', 2)
  metadata = _messages.MessageField('MetadataValue', 3)
  name = _messages.StringField(4)
  response = _messages.MessageField('ResponseValue', 5)


class RuntimeConfig(_messages.Message):
  """RuntimeConfig is the primary resource in the Configuration service. It
  consists of metadata and a hierarchy of variables.

  Fields:
    description: Description of the configuration object. `len(description)`
      must be less than 256.
    name: The resource name of a runtime config. It has the format of
      "projects/{project_id}/configs/{config_id}", where `project_id` is a
      valid Google cloud project ID, and the `config_id` must match RFC 1035
      segment specification, and `len(config_id)` must be less than 64 bytes.
      The name is assigned by the client, but will be validated on the server
      side to adhere to the format. Name is immutable and cannot be changed.
  """

  description = _messages.StringField(1)
  name = _messages.StringField(2)


class RuntimeconfigProjectsConfigsCreateRequest(_messages.Message):
  """A RuntimeconfigProjectsConfigsCreateRequest object.

  Fields:
    projectsId: Part of `parent`. The cloud project to which configuration
      belongs. Required. Must be a valid GCP project.
    runtimeConfig: A RuntimeConfig resource to be passed as the request body.
  """

  projectsId = _messages.StringField(1, required=True)
  runtimeConfig = _messages.MessageField('RuntimeConfig', 2)


class RuntimeconfigProjectsConfigsDeleteRequest(_messages.Message):
  """A RuntimeconfigProjectsConfigsDeleteRequest object.

  Fields:
    configsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. The configuration resource object to delete.
      Required. Must be a valid GCP project.
  """

  configsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)


class RuntimeconfigProjectsConfigsGetRequest(_messages.Message):
  """A RuntimeconfigProjectsConfigsGetRequest object.

  Fields:
    configsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. The name of the RuntimeConfig resource object
      to retrieve.
  """

  configsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)


class RuntimeconfigProjectsConfigsListRequest(_messages.Message):
  """A RuntimeconfigProjectsConfigsListRequest object.

  Fields:
    pageSize: List pagination support. The size of the page to return. We may
      return fewer elements.
    pageToken: The token for pagination.
    projectsId: Part of `parent`. The cloud project, whose configuration
      resources we want to list. Required. Must be a valid GCP project.
  """

  pageSize = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(2)
  projectsId = _messages.StringField(3, required=True)


class RuntimeconfigProjectsConfigsOperationsGetRequest(_messages.Message):
  """A RuntimeconfigProjectsConfigsOperationsGetRequest object.

  Fields:
    configsId: Part of `name`. See documentation of `projectsId`.
    operationsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. The name of the operation resource.
  """

  configsId = _messages.StringField(1, required=True)
  operationsId = _messages.StringField(2, required=True)
  projectsId = _messages.StringField(3, required=True)


class RuntimeconfigProjectsConfigsUpdateRequest(_messages.Message):
  """A RuntimeconfigProjectsConfigsUpdateRequest object.

  Fields:
    configsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. The name of the config resource to update.
      Required. Must be a valid config resource.
    runtimeConfig: A RuntimeConfig resource to be passed as the request body.
  """

  configsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)
  runtimeConfig = _messages.MessageField('RuntimeConfig', 3)


class RuntimeconfigProjectsConfigsVariablesCreateRequest(_messages.Message):
  """A RuntimeconfigProjectsConfigsVariablesCreateRequest object.

  Fields:
    configsId: Part of `parent`. See documentation of `projectsId`.
    projectsId: Part of `parent`. The configuration parent, that will own the
      variable. Required, must a valid configuration name within project_id.
    variable: A Variable resource to be passed as the request body.
  """

  configsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)
  variable = _messages.MessageField('Variable', 3)


class RuntimeconfigProjectsConfigsVariablesDeleteRequest(_messages.Message):
  """A RuntimeconfigProjectsConfigsVariablesDeleteRequest object.

  Fields:
    configsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. The name of the variable to delete.
    recursive: If recursive is false and name is a prefix of other variables,
      then the request will fail.
    variablesId: Part of `name`. See documentation of `projectsId`.
  """

  configsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)
  recursive = _messages.BooleanField(3)
  variablesId = _messages.StringField(4, required=True)


class RuntimeconfigProjectsConfigsVariablesGetRequest(_messages.Message):
  """A RuntimeconfigProjectsConfigsVariablesGetRequest object.

  Fields:
    configsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. What variable to return.
    variablesId: Part of `name`. See documentation of `projectsId`.
  """

  configsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)
  variablesId = _messages.StringField(3, required=True)


class RuntimeconfigProjectsConfigsVariablesListRequest(_messages.Message):
  """A RuntimeconfigProjectsConfigsVariablesListRequest object.

  Fields:
    configsId: Part of `parent`. See documentation of `projectsId`.
    filter: List only variables matching filter prefix exactly. e.g.
      `projects/{project_id}/config/{config_id}/variables/{variable/id}`.
    pageSize: List pagination support. The size of the page to return. We may
      return fewer elements.
    pageToken: The token for pagination.
    projectsId: Part of `parent`. Which RuntimeConfig object to list for
      variables.
  """

  configsId = _messages.StringField(1, required=True)
  filter = _messages.StringField(2)
  pageSize = _messages.IntegerField(3, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(4)
  projectsId = _messages.StringField(5, required=True)


class RuntimeconfigProjectsConfigsVariablesUpdateRequest(_messages.Message):
  """A RuntimeconfigProjectsConfigsVariablesUpdateRequest object.

  Fields:
    configsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. The name of the variable to update. In the
      format of:
      "projects/{project_id}/configs/{config_id}/variables/{variable_id}"
    variable: A Variable resource to be passed as the request body.
    variablesId: Part of `name`. See documentation of `projectsId`.
  """

  configsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)
  variable = _messages.MessageField('Variable', 3)
  variablesId = _messages.StringField(4, required=True)


class RuntimeconfigProjectsConfigsVariablesWatchRequest(_messages.Message):
  """A RuntimeconfigProjectsConfigsVariablesWatchRequest object.

  Fields:
    configsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. The name of the variable to retrieve.
    variablesId: Part of `name`. See documentation of `projectsId`.
    watchVariableRequest: A WatchVariableRequest resource to be passed as the
      request body.
  """

  configsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)
  variablesId = _messages.StringField(3, required=True)
  watchVariableRequest = _messages.MessageField('WatchVariableRequest', 4)


class RuntimeconfigProjectsConfigsWaitersCreateRequest(_messages.Message):
  """A RuntimeconfigProjectsConfigsWaitersCreateRequest object.

  Fields:
    configsId: Part of `parent`. See documentation of `projectsId`.
    projectsId: Part of `parent`. The fully-qualified name of the
      configuration that will own the waiter. Required. Must be a valid
      configuration name.
    waiter: A Waiter resource to be passed as the request body.
  """

  configsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)
  waiter = _messages.MessageField('Waiter', 3)


class RuntimeconfigProjectsConfigsWaitersDeleteRequest(_messages.Message):
  """A RuntimeconfigProjectsConfigsWaitersDeleteRequest object.

  Fields:
    configsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. The Waiter resource to delete.
    waitersId: Part of `name`. See documentation of `projectsId`.
  """

  configsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)
  waitersId = _messages.StringField(3, required=True)


class RuntimeconfigProjectsConfigsWaitersGetRequest(_messages.Message):
  """A RuntimeconfigProjectsConfigsWaitersGetRequest object.

  Fields:
    configsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. The fully-qualified name of the Waiter
      resource object to retrieve.
    waitersId: Part of `name`. See documentation of `projectsId`.
  """

  configsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)
  waitersId = _messages.StringField(3, required=True)


class RuntimeconfigProjectsConfigsWaitersListRequest(_messages.Message):
  """A RuntimeconfigProjectsConfigsWaitersListRequest object.

  Fields:
    configsId: Part of `parent`. See documentation of `projectsId`.
    pageSize: List pagination support. The size of the page to return. We may
      return fewer elements.
    pageToken: The token for pagination.
    projectsId: Part of `parent`. The fully-qualified name of the
      configuration to list. Required. Must be a valid configuration name.
  """

  configsId = _messages.StringField(1, required=True)
  pageSize = _messages.IntegerField(2, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(3)
  projectsId = _messages.StringField(4, required=True)


class StandardQueryParameters(_messages.Message):
  """Query parameters accepted by all methods.

  Enums:
    FXgafvValueValuesEnum: V1 error format.
    AltValueValuesEnum: Data format for response.

  Fields:
    f__xgafv: V1 error format.
    access_token: OAuth access token.
    alt: Data format for response.
    bearer_token: OAuth bearer token.
    callback: JSONP
    fields: Selector specifying which fields to include in a partial response.
    key: API key. Your API key identifies your project and provides you with
      API access, quota, and reports. Required unless you provide an OAuth 2.0
      token.
    oauth_token: OAuth 2.0 token for the current user.
    pp: Pretty-print response.
    prettyPrint: Returns response with indentations and line breaks.
    quotaUser: Available to use for quota purposes for server-side
      applications. Can be any arbitrary string assigned to a user, but should
      not exceed 40 characters.
    trace: A tracing token of the form "token:<tokenid>" to include in api
      requests.
    uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
    upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
  """

  class AltValueValuesEnum(_messages.Enum):
    """Data format for response.

    Values:
      json: Responses with Content-Type of application/json
      media: Media download with context-dependent Content-Type
      proto: Responses with Content-Type of application/x-protobuf
    """
    json = 0
    media = 1
    proto = 2

  class FXgafvValueValuesEnum(_messages.Enum):
    """V1 error format.

    Values:
      _1: v1 error format
      _2: v2 error format
    """
    _1 = 0
    _2 = 1

  f__xgafv = _messages.EnumField('FXgafvValueValuesEnum', 1)
  access_token = _messages.StringField(2)
  alt = _messages.EnumField('AltValueValuesEnum', 3, default=u'json')
  bearer_token = _messages.StringField(4)
  callback = _messages.StringField(5)
  fields = _messages.StringField(6)
  key = _messages.StringField(7)
  oauth_token = _messages.StringField(8)
  pp = _messages.BooleanField(9, default=True)
  prettyPrint = _messages.BooleanField(10, default=True)
  quotaUser = _messages.StringField(11)
  trace = _messages.StringField(12)
  uploadType = _messages.StringField(13)
  upload_protocol = _messages.StringField(14)


class Status(_messages.Message):
  """The `Status` type defines a logical error model that is suitable for
  different programming environments, including REST APIs and RPC APIs. It is
  used by [gRPC](https://github.com/grpc). The error model is designed to be:
  - Simple to use and understand for most users - Flexible enough to meet
  unexpected needs  # Overview  The `Status` message contains three pieces of
  data: error code, error message, and error details. The error code should be
  an enum value of google.rpc.Code, but it may accept additional error codes
  if needed.  The error message should be a developer-facing English message
  that helps developers *understand* and *resolve* the error. If a localized
  user-facing error message is needed, put the localized message in the error
  details or localize it in the client. The optional error details may contain
  arbitrary information about the error. There is a predefined set of error
  detail types in the package `google.rpc` which can be used for common error
  conditions.  # Language mapping  The `Status` message is the logical
  representation of the error model, but it is not necessarily the actual wire
  format. When the `Status` message is exposed in different client libraries
  and different wire protocols, it can be mapped differently. For example, it
  will likely be mapped to some exceptions in Java, but more likely mapped to
  some error codes in C.  # Other uses  The error model and the `Status`
  message can be used in a variety of environments, either with or without
  APIs, to provide a consistent developer experience across different
  environments.  Example uses of this error model include:  - Partial errors.
  If a service needs to return partial errors to the client,     it may embed
  the `Status` in the normal response to indicate the partial     errors.  -
  Workflow errors. A typical workflow has multiple steps. Each step may
  have a `Status` message for error reporting purpose.  - Batch operations. If
  a client uses batch request and batch response, the     `Status` message
  should be used directly inside batch response, one for     each error sub-
  response.  - Asynchronous operations. If an API call embeds asynchronous
  operation     results in its response, the status of those operations should
  be     represented directly using the `Status` message.  - Logging. If some
  API errors are stored in logs, the message `Status` could     be used
  directly after any stripping needed for security/privacy reasons.

  Messages:
    DetailsValueListEntry: A DetailsValueListEntry object.

  Fields:
    code: The status code, which should be an enum value of google.rpc.Code.
    details: A list of messages that carry the error details.  There will be a
      common set of message types for APIs to use.
    message: A developer-facing error message, which should be in English. Any
      user-facing error message should be localized and sent in the
      google.rpc.Status.details field, or localized by the client.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class DetailsValueListEntry(_messages.Message):
    """A DetailsValueListEntry object.

    Messages:
      AdditionalProperty: An additional property for a DetailsValueListEntry
        object.

    Fields:
      additionalProperties: Properties of the object. Contains field @ype with
        type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a DetailsValueListEntry object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  code = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  details = _messages.MessageField('DetailsValueListEntry', 2, repeated=True)
  message = _messages.StringField(3)


class Variable(_messages.Message):
  """Variable message describes a single variable within a Configuration
  object. name denotes the hierarchical variable name, e.g. ports/serving_port
  within flags configuration object. Value is an opaque string and only leaf
  variables can have values.

  Enums:
    StateValueValuesEnum: [Ouput only] The current state of the variable.
      State denotes the outcome of the Watch call and is unset by the Get/List
      calls.

  Fields:
    name: Name of the variable resource. It has format of
      "projects/{project_id}/configs/{config_id}/variables/{variable_id}",
      Where `project_id` must be a valid Google Cloud project ID, `config_id`
      must be a valid RuntimeConfig object and `variable_id` follows Unix file
      system file path naming. `variable_id` can contain ASCII letters,
      numbers, slashes and dashes. Slashes are used as path element separators
      and are not part of the `variable_id` itself, so `variable_id` must
      contain at least one non-slash character. Multiple slashes are coalesced
      into single slash character. Each path segment should follow RFC 1035
      segment specification. `len(variable_id)` must be less than 256 bytes.
      The name is assigned by the client, but will be validated on the server
      side to adhere to the format. Name is immutable and cannot be changed.
    state: [Ouput only] The current state of the variable. State denotes the
      outcome of the Watch call and is unset by the Get/List calls.
    updateTime: [Output Only] The time of the last variable update.
    value: `len(value)` must be less than 4096 bytes. Empty values are also
      accepted. value must be Base64 encoded.
  """

  class StateValueValuesEnum(_messages.Enum):
    """[Ouput only] The current state of the variable. State denotes the
    outcome of the Watch call and is unset by the Get/List calls.

    Values:
      VARIABLE_STATE_UNSPECIFIED: Default variable state.
      UPDATED: Variable had been updated, while watch was executing.
      DELETED: Variable had been deleted, while watch was executing.
    """
    VARIABLE_STATE_UNSPECIFIED = 0
    UPDATED = 1
    DELETED = 2

  name = _messages.StringField(1)
  state = _messages.EnumField('StateValueValuesEnum', 2)
  updateTime = _messages.StringField(3)
  value = _messages.BytesField(4)


class Waiter(_messages.Message):
  """A Waiter resource waits for some condition within a RuntimeConfig
  resource to be met. For example: each node in a distributed system startup
  process writes a value to a Variable resource indicating its readiness. A
  Waiter configured with the proper `success` condition can be used to wait
  until some number of nodes have checked in. Once created, a Waiter resource
  is immutable.

  Fields:
    createTime: The instant at which this Waiter was created. Adding the value
      of `timeout` to this instant yields the timeout deadline for this
      Waiter. Output only.
    done: If the value is `false`, it means the Waiter is still waiting for
      one of its conditions to be met. If true, the Waiter has finished. If
      the Waiter finished due to a timeout or failure, `error` will be set.
      Output only.
    error: If the Waiter ended due to a failure or timeout, this value will be
      set. Output only.
    failure: The failure condition. If this condition is met, `done` will be
      set to `true` and the `error` code will be set to ABORTED. The failure
      condition takes precedence over the success condition. If both
      conditions are met, a failure will be indicated. This value is optional;
      if no failure condition is set, the only failure scenario will be a
      timeout. Optional.
    name: Name of the variable resource. It has format of
      "projects/{project_id}/configs/{config_id}/waiters/{waiter_id}", Where
      `project_id` must be a valid Google Cloud project ID, `config_id` must
      be a valid RuntimeConfig object and the `waiter_id` must match RFC 1035
      segment specification, and `len(waiter_id)` must be less than 64 bytes.
      The name is assigned by the client, but will be validated on the server
      side to adhere to the format. Name is immutable and cannot be changed.
      Required.
    success: The success condition. If this condition is met, `done` will be
      set to `true` and the `error` value will remain unset. The failure
      condition takes precedence over the success condition. If both
      conditions are met, a failure will be indicated. Required.
    timeout: The timeout, beginning from the instant that CreateWaiter is
      called. If this timeout elapses prior to the success or failure
      conditions being met, the Waiter will fail and the `error` code will be
      set to DEADLINE_EXCEEDED. Required.
  """

  createTime = _messages.StringField(1)
  done = _messages.BooleanField(2)
  error = _messages.MessageField('Status', 3)
  failure = _messages.MessageField('EndCondition', 4)
  name = _messages.StringField(5)
  success = _messages.MessageField('EndCondition', 6)
  timeout = _messages.StringField(7)


class WatchVariableRequest(_messages.Message):
  """Request for the `WatchVariable()` method.

  Fields:
    newerThan: If backend has a variable that has a newer value than this
      timestamp, then request will return immediately with current value. If
      not specified or variable has an older timestamp, will wait for the new
      value.
  """

  newerThan = _messages.StringField(1)


encoding.AddCustomJsonFieldMapping(
    StandardQueryParameters, 'f__xgafv', '$.xgafv',
    package=u'runtimeconfig')
encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_1', '1',
    package=u'runtimeconfig')
encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_2', '2',
    package=u'runtimeconfig')
